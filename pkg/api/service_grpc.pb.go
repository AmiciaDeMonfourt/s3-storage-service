// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.2
// source: service.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	S3Storage_UploadMedia_FullMethodName       = "/api.S3Storage/UploadMedia"
	S3Storage_DownloadLiteMedia_FullMethodName = "/api.S3Storage/DownloadLiteMedia"
)

// S3StorageClient is the client API for S3Storage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type S3StorageClient interface {
	UploadMedia(ctx context.Context, in *UploadMediaRequest, opts ...grpc.CallOption) (*UploadMediaResponse, error)
	DownloadLiteMedia(ctx context.Context, in *DownloadMediaRequest, opts ...grpc.CallOption) (*DownloadMediaResponse, error)
}

type s3StorageClient struct {
	cc grpc.ClientConnInterface
}

func NewS3StorageClient(cc grpc.ClientConnInterface) S3StorageClient {
	return &s3StorageClient{cc}
}

func (c *s3StorageClient) UploadMedia(ctx context.Context, in *UploadMediaRequest, opts ...grpc.CallOption) (*UploadMediaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UploadMediaResponse)
	err := c.cc.Invoke(ctx, S3Storage_UploadMedia_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *s3StorageClient) DownloadLiteMedia(ctx context.Context, in *DownloadMediaRequest, opts ...grpc.CallOption) (*DownloadMediaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DownloadMediaResponse)
	err := c.cc.Invoke(ctx, S3Storage_DownloadLiteMedia_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// S3StorageServer is the server API for S3Storage service.
// All implementations must embed UnimplementedS3StorageServer
// for forward compatibility
type S3StorageServer interface {
	UploadMedia(context.Context, *UploadMediaRequest) (*UploadMediaResponse, error)
	DownloadLiteMedia(context.Context, *DownloadMediaRequest) (*DownloadMediaResponse, error)
	mustEmbedUnimplementedS3StorageServer()
}

// UnimplementedS3StorageServer must be embedded to have forward compatible implementations.
type UnimplementedS3StorageServer struct {
}

func (UnimplementedS3StorageServer) UploadMedia(context.Context, *UploadMediaRequest) (*UploadMediaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadMedia not implemented")
}
func (UnimplementedS3StorageServer) DownloadLiteMedia(context.Context, *DownloadMediaRequest) (*DownloadMediaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadLiteMedia not implemented")
}
func (UnimplementedS3StorageServer) mustEmbedUnimplementedS3StorageServer() {}

// UnsafeS3StorageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to S3StorageServer will
// result in compilation errors.
type UnsafeS3StorageServer interface {
	mustEmbedUnimplementedS3StorageServer()
}

func RegisterS3StorageServer(s grpc.ServiceRegistrar, srv S3StorageServer) {
	s.RegisterService(&S3Storage_ServiceDesc, srv)
}

func _S3Storage_UploadMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadMediaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(S3StorageServer).UploadMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: S3Storage_UploadMedia_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(S3StorageServer).UploadMedia(ctx, req.(*UploadMediaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _S3Storage_DownloadLiteMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadMediaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(S3StorageServer).DownloadLiteMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: S3Storage_DownloadLiteMedia_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(S3StorageServer).DownloadLiteMedia(ctx, req.(*DownloadMediaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// S3Storage_ServiceDesc is the grpc.ServiceDesc for S3Storage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var S3Storage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.S3Storage",
	HandlerType: (*S3StorageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadMedia",
			Handler:    _S3Storage_UploadMedia_Handler,
		},
		{
			MethodName: "DownloadLiteMedia",
			Handler:    _S3Storage_DownloadLiteMedia_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
